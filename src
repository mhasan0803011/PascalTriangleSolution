// Problem statement: Given a non-negative integer k where k<= 33, 
// return k-th index row of the Pascal's triangle
// O(n^2) solution with O(n) space complexity

#include <stdio.h>
#include <iostream>
#include <vector>
using namespace std;

vector<int> findPascalTriangleRow (int k){
    // if the index is empty, then the function should return empty vector
    if (k==0){
        vector <int> t1{};
        return t1;
    }
    // index k is not empty     
    vector <int> tmp(k,0);
    vector <int> B(k, 0);
    
    for (int i=0; i<k; i++){
        for (int j=0; j<=i; j++){
            // first index always 1
            if (j==0){
                B[j]=1;
            }
            // last index always 1
            else if (i==j){
                B[j]=1;
            }
            // if j not equal 0 or i, the detremine index between 0 to i
            else {
                B[j] = tmp[j-1]+ tmp[j];
            }
        }
        // copy current element in tmp array , so that we can use it in next iteration 
        tmp=B;
    }
    return B;
}


int main()
{
    vector <int> num;
    int index = 5;
    num = findPascalTriangleRow (index);
    for (int z=0; z<num.size(); z++){
        cout << num[z] << "  ";
    }
    cout << endl;
    return 0;
}
